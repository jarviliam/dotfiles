##########################################################
#                 wm independent hotkeys                 #
##########################################################


# terminal emulator
super + Return
	alacritty

# program launcher
super + r
	rofi -show combi -show-icons -font "Fira Code Nerd Font 14"

# power menu
super + p
	rofi -show power-menu -modi power-menu:rofi-power-menu -show-icons -font "Fira Code Nerd Font 14"

# app switcher
super + Tab
	rofi -show window -show-icons -font "Fira Code Nerd Font 14"

# browser
super + b
	librewolf

# file manager
super + shift + f
	dolphin

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

# screenshot
super + shift + s
	flameshot

# reload polybar
super + ctrl + Escape
    polybar-msg cmd restart

##########################################################
#                     bspwm hotkeys                      #
##########################################################


# quit/restart bspwm
super + alt + {q,r}
	bspc {quit,wm -r}

# close and kill
super + {_,shift + }w
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest window
super + g
	bspc node -s biggest.window

# toggle borderless mode
alt + shift + f
    case $(bspc config window_gap) in \
      0) bspc config window_gap 24 ;; \
      *) bspc config window_gap 0  ;; \
    esac

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous window in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local.!hidden.window

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + grave
	bspc node -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}

XF86Audio{Next,Prev,Play,Stop}
    mpc {next,prev,toggle,stop}

{XF86AudioRaiseVolume, XF86AudioLowerVolume}
    pamixer {-i 2, -d 2}; \
    ou_vol=$(pamixer --get-volume); \
    jack_stat=$($HOME/bin/has_headphone); \
    [ $jack_stat = "yes" ] && icon=" "; \
    [ $jack_stat = "no" ]  && icon=" "; \
    dunstify "$icon Volume: "$ou_vol -t 1000 -r 1

# pulseaudio controls mic volume up & down
shift + {XF86AudioRaiseVolume, XF86AudioLowerVolume}
    pamixer --source 1 {-i 2, -d 2}; \
    ou_mic=$(pamixer --source 1 --get-volume); \
    dunstify "  Microphone: "$ou_mic -t 1000 -r 1

# pulseaudio controls monitor volume up & down
alt + {XF86AudioRaiseVolume, XF86AudioLowerVolume}
    pamixer --source 0 {-i 2, -d 2}; \
    ou_mon=$(pamixer --source 0 --get-volume); \
    dunstify "  Monitor: "$ou_mon -t 1000 -r 1

# pulseaudio controls mute speaker
XF86AudioMute
    pamixer \
    --toggle-mute; \
    ou_mute=$(pamixer --get-mute); \
    jack_stat=$($HOME/bin/has_headphone); \
    [ $jack_stat = "yes" ] && icon_on=" " icon_off=" "; \
    [ $jack_stat = "no" ]  && icon_on=" " icon_off=" "; \
    [ $ou_mute = "true" ]  && dunstify "$icon_off MUTED" -t 1000 -r 1; \
    [ $ou_mute = "false" ] && dunstify "$icon_on UNMUTED" -t 1000 -r 1

# pulseaudio controls mute mic
shift + XF86AudioMute
    pamixer \
    --source 1 --toggle-mute; \
    in_mute=$(pamixer --source 1 --get-mute); \
    [ $in_mute = "true" ]  && dunstify "  MUTED" -t 1000 -r 1; \
    [ $in_mute = "false" ] && dunstify "  UNMUTED" -t 1000 -r 1

# pulseaudio controls mute mic
alt + XF86AudioMute
    pamixer \
    --source 0 --toggle-mute; \
    in_mute=$(pamixer --source 0 --get-mute); \
    [ $in_mute = "true" ]  && dunstify "  MUTED" -t 1000 -r 1; \
    [ $in_mute = "false" ] && dunstify "  UNMUTED" -t 1000 -r 1

{XF86MonBrightnessUp, XF86MonBrightnessDown}
    xbacklight {-inc 5, -dec 5}; \
    get_brightness=$(xbacklight -get | cut -f 1 -d '.'); \
    dunstify "  Brightness: "$get_brightness -t 1000 -r 1
